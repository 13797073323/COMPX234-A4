import socket
import base64
import sys

def send_reliable(sock, msg, addr, max_retries=5):
    """Reliable message transmission with exponential backoff"""
    timeout = 1000  # Initial timeout: 1 second
    for attempt in range(max_retries):
        try:
            sock.sendto(msg.encode(), addr)
            sock.settimeout(timeout / 1000)
            response, _ = sock.recvfrom(65535)
            return response.decode()
        except socket.timeout:
            print(f"\n[CLIENT] Timeout (attempt {attempt+1}/{max_retries}), retrying...")
            timeout *= 2  # Exponential backoff
    return None

def download_file(sock, host, port, filename):
    """Download a single file from server"""
    print(f"\n[CLIENT] Requesting {filename}...")
    
    # Send DOWNLOAD request
    resp = send_reliable(sock, f"DOWNLOAD {filename}", (host, port))
    if not resp:
        print(f"[CLIENT] Failed to download {filename}: No response")
        return False
    
        # Handle error response
    if "ERR" in resp:
        print(f"[CLIENT] Server error: {resp}")
        return False
    
    # Parse OK response
    parts = resp.split()
    if len(parts) < 6 or parts[0] != "OK" or parts[1] != filename:
        print(f"[CLIENT] Invalid response: {resp}")
        return False
    
    try:
        file_size = int(parts[3])
        data_port = int(parts[5])
    except (ValueError, IndexError):
        print(f"[CLIENT] Malformed response: {resp}")
        return False
    
    print(f"[CLIENT] Downloading {filename} ({file_size} bytes)...")

        # Create local file
    with open(filename, 'wb') as f:
        downloaded = 0
        block_size = 1000  # Max bytes per block

         # Download file in blocks
        while downloaded < file_size:
            end = min(downloaded + block_size - 1, file_size - 1)
            request = f"FILE {filename} GET START {downloaded} END {end}"