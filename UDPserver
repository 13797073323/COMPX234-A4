import socket
import threading
import os
import random
import base64

def handle_client(filename, client_addr, data_port):
    """Thread function to handle file transmission for a single client"""
    try:
        # Create dedicated socket for this client
        client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        client_sock.bind(('', data_port))
        
            # Open requested file
        with open(filename, 'rb') as f:
            file_size = os.path.getsize(filename)
            
            # Main loop for handling client requests
            while True:
                # Receive client request
                req_data, addr = client_sock.recvfrom(1024)
                req_parts = req_data.decode().split()    

                                # Validate message format
                if len(req_parts) < 3 or req_parts[0] != "FILE" or req_parts[1] != filename:
                    continue
                
                # Process CLOSE request
                if req_parts[2] == "CLOSE":
                    client_sock.sendto(f"FILE {filename} CLOSE_OK".encode(), addr)
                    print(f"[SERVER] Closed connection for {filename}")
                    break

                                # Process GET request
                elif req_parts[2] == "GET" and len(req_parts) == 7:
                    start = int(req_parts[4])
                    end = int(req_parts[6])
                    
                    # Validate byte range
                    if start < 0 or end >= file_size:
                        continue
                    
                    # Read requested file segment
                    f.seek(start)
                    chunk = f.read(end - start + 1)

                                       # Encode to Base64 and send response
                    base64_data = base64.b64encode(chunk).decode('utf-8')
                    response = f"FILE {filename} OK START {start} END {end} DATA {base64_data}"
                    client_sock.sendto(response.encode(), addr)

    finally:
        client_sock.close()
   
def main():
    """Main server function"""
    # Validate command line arguments
    if len(sys.argv) != 2:
        print("Usage: python UDPserver.py <port>")
        return
    
    port = int(sys.argv[1])

    # Create welcome socket
    welcome_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    welcome_sock.bind(('', port))
    print(f"[SERVER] Listening on port {port}")

        # Main server loop
    while True:
        try:
            # Receive download request
            data, addr = welcome_sock.recvfrom(1024)
            msg = data.decode().split()
            
            # Validate DOWNLOAD request
            if len(msg) < 2 or msg[0] != "DOWNLOAD":
                continue

            filename = msg[1]
            print(f"[SERVER] Received DOWNLOAD request for {filename} from {addr}")
            
            # Check file existence
            if not os.path.exists(filename):
                welcome_sock.sendto(f"ERR {filename} NOT_FOUND".encode(), addr)
                continue

                        # Create dedicated thread for client
            data_port = random.randint(50000, 51000)
            file_size = os.path.getsize(filename)
            response = f"OK {filename} SIZE {file_size} PORT {data_port}"
            welcome_sock.sendto(response.encode(), addr)

                        # Start client thread
            threading.Thread(
                target=handle_client, 
                args=(filename, addr, data_port),
                daemon=True
            ).start()

        except KeyboardInterrupt:
            print("\n[SERVER] Shutting down...")
            break

if __name__ == "__main__":
    import sys
    main()